---
# BOB - Bot-Operated Builds

- hosts: all
  remote_user: root

  tasks:
  - name: make build dirs
    file:
      path: /export/{{ item }}
      state: directory
      mode: 0755
    with_items:
      - 'nightly'
      - 'build'
      - 'src'

  - name: make local stackios nightly dir
    file:
      path: /export/nightly
      state: directory
      mode: 0755

  - name: find stacki pallets
    local_action: shell ls -t /export/nightly/stacki/stacki*.iso
    register: latest_stacki_isos

  - name: find latest stacki pallet filename
    set_fact: stacki_iso={{ latest_stacki_isos.stdout_lines | first }}

  - name: find latest rollos pallet
    local_action: shell ls -t /export/nightly/os/os-7.*.iso
    register: latest_rollos_isos

  - name: find latest rollos pallet filename
    set_fact: rollos_iso={{ latest_rollos_isos.stdout_lines | first }}

  - name: copy input isos
    copy:
      src: "{{ item }}"
      dest: /export/src/
      mode: 0755
    with_items:
      - "{{ stacki_iso }}"
      - "{{ rollos_iso }}"

  - name: set regex pattern for stacki ISO
    set_fact: iso_pattern="stacki-(?P<version>\d+\.\d+)_.*_(?P<commit>\w+)?-.*\.iso"

  - name: extract commit hash from stacki iso
    set_fact: stacki_commit={{ stacki_iso | basename | regex_replace(iso_pattern, '\\g<commit>') }}

  - name: extract version number from stacki iso
    set_fact: stacki_version={{ stacki_iso | basename | regex_replace(iso_pattern, '\\g<version>') }}

  - name: set regex pattern for rollos ISO
    set_fact: os_iso_pattern="os-(?P<version>\d+\.\d+)-stacki_?(?P<commit>\w+)?.*\.iso"

  #- name: extract commit hash from rollos iso
  #  set_fact: rollos_commit={{ rollos_iso | basename | regex_replace(os_iso_pattern, '\\g<commit>') }}

  - name: set stackios version stamp
    set_fact: stackios_version={{ stacki_version + '_' + stacki_commit }}

  - name: create stackios iso
    shell: stack create pallet /export/src/*iso name=stackios version={{ stackios_version }}
    ignore_errors: true
    register: build_status

  - name: find remote iso
    shell: ls /root/stackios-{{ stackios_version }}*.iso
    register: file_path
    when: build_status|succeeded

  - name: get artifact iso
    fetch:
      src: "{{ file_path.stdout }}"
      dest: /export/nightly/stackios/
      flat: yes
      fail_on_missing: yes
    when: build_status|succeeded

  - name: delete source isos
    file:
      name: /export/src/{{ item }}
      state: absent
    with_items:
      - "{{ stacki_iso }}"
      - "{{ rollos_iso }}"

  - name: delete artifact isos
    file:
      name: "{{ file_path.stdout }}"
      state: absent

  - name: delete source tree
    file:
      name: /export/{{ item }}/
      state: absent
    with_items:
      - 'nightly'
      - 'build'
      - 'src'
